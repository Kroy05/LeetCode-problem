class Solution {
    public int mincostTickets(int[] days, int[] costs) {
        int[] dp = new int[366];
        HashSet<Integer> travelDays = new HashSet<>();
        
        for (int day : days) {
            travelDays.add(day);
        }
        
        for (int day = 1; day <= 365; day++) {
            if (!travelDays.contains(day)) {
                dp[day] = dp[day - 1];
            } else {
                dp[day] = Math.min(dp[day - 1] + costs[0], 
                                   Math.min(dp[Math.max(0, day - 7)] + costs[1], 
                                            dp[Math.max(0, day - 30)] + costs[2]));
            }
        }
        
        return dp[365];
    }
}
Intuition
The goal is to minimize the cost for traveling on specific days given the available ticket options. We need to keep track of the minimum cost for each day based on the available tickets and the travel days provided.

Approach
We maintain a dp array where each index represents the minimum cost to travel up to that day.
We iterate through each day and check if itâ€™s a travel day.
If it is, we calculate the minimum cost using three types of passes (1-day, 7-day, 30-day) and update the dp array accordingly.
The final answer is stored in dp[365], which represents the minimum cost to cover all travel days.
Complexity
Time complexity: O(n), where n is the number of days in the input list (since we iterate through all 365 days).
Space complexity: O(n), where n is the size of the dp array (365 elements).
