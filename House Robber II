import java.util.*;

class Solution {
    public int rob(int[] nums) {
        int n = nums.length;
        if (n == 1) {
            return nums[0];
        }

        // Case 1: Consider the first house and skip the last house
        int[] dp = new int[n + 1];
        dp[0] = 0;
        for (int i = 1; i <= n - 1; i++) {
            int skip = dp[i - 1];
            int take = nums[i - 1] + (i - 2 >= 0 ? dp[i - 2] : 0);
            dp[i] = Math.max(skip, take);
        }
        int result1 = dp[n - 1];

        // Case 2: Skip the first house and consider the last house
        Arrays.fill(dp, 0);
        dp[0] = 0;
        dp[1] = 0; // Skip the first house
        for (int i = 2; i <= n; i++) {
            int skip = dp[i - 1];
            int take = nums[i - 1] + (i - 2 >= 0 ? dp[i - 2] : 0);
            dp[i] = Math.max(skip, take);
        }
        int result2 = dp[n];

        // Return the maximum of the two cases
        return Math.max(result1, result2);
    }
}
